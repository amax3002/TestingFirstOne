{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww28600\viewh15240\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\b XBUS_501: Software Engineering for Data\

\b0 \
\'91Hypothesis Driven Development\'92 \
  * series of experiments, and the process is iterated upon\
  * Data Science & Hypothesis Driven Development does 
\i\b not 
\i0\b0 build projects, it builds experiments. \
  * Test what you 
\i think 
\i0 the problem is, before you work the solution\
 \
Benefits: Measurable evidence & learning are primary results\
               Better equipped to work with uncertainty\
               Creates higher team engagement\
               Next steps become more obvious\
\
\

\b PROJECT TEMPLATE FOR DEVELOPING QUALITY PYTHON CODE\

\b0   * Package Management\
     - Handles dependencies; manages downloads from servers (i.e.: download small pieces of code to install software vs. downloading 1 big file & taking forever)\
       the downloads of small packages are facilitated by a smart agent on individuals computer.\
\
  * Virtual Environments\
     - They are a best practice - not required but recommended.  its the \'91right way\'92 to do things ..\
        for example you can download multiple versions of python and write different code / download different libraries (
\i dependencies
\i0 ) and keep them separate and \
        isolated from each other. \
     - the tool in python is command \'91pip install virtualenv\'92 allows you to create multiple versions of python.  Its available on pip.  To use it: \
       \'91virtualenv <env name>\'92\
        now you have to execute it.. by modifying the path\
        \'91source env<path> activate \
**check blackboard slides for links to further information**\
\
         *    > $path\
\
  * REPL \
     - Re/evaluate Print Loop\
       >interactively send commands to your environment\
       >example python shell / you command \'91hello world\'92 .. it reads it, evaluates it, prints it, then loops back and ready to read again. \
       >common on a lot of languages \
	Workflow : 1. open text file, type code and save it.  2. import into python and execute it\
\
#1. You need a good text editor (i.e. : Atom for Mac, NotePad++ for Windows)\
  > text editors are for software development.\
  > you can also use an IDE (PyCharm, Spyder, iPython) - kind of like training wheels though, you won\'92t 
\i learn
\i0  python.\
  > Pip packages (package installers) .. python has their own Pip (\'93Pip installs packages\'94) \
  > PyPI controls all python package indexes\
  > you can install libraries..\
   >>> pip install requests \
     *python will download and install (i.e.: its doing package mgmt) \
  > review \'91pip freeze\'92 \
\
Starting a new project: Structure\
\
Start with text editor (ATOM) \
   open command line with multiple tabs (like REPL, database client..) \
   open browser for reference (i.e.: google/stackoverflow) \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}